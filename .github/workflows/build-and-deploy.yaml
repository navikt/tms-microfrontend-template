name: "Build and deploy"
on:
  push:
    branches:
      - "main"
      - "dev-*"
env:
  "IMAGE": "ghcr.io/${{ github.repository }}/tms-mikrofrontend-template:${{ github.sha }}"
permissions:
  contents: "read"
  id-token: "write"
  packages: "write"

jobs:
  build:
    name: "build"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-node@v3"
        with:
          node-version: 16
          registry-url: "https://npm.pkg.github.com"
          cache: "npm"
      - name: "Install dependencies"
        run: "npm ci"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: "Build application"
        run: "npm run build"
      - name: cdn-upload
        uses: navikt/frontend/actions/cdn-upload/v1@main
        with:
          cdn-team-name: mitt-team-navn
          source: ./dist/
          destination: "tms-mikrofrontend-template"
      - name: export-cdn-url
        run: |
          paths="${{ steps.cdn-upload.outputs.uploaded }}"
          cdn_js_path=$(echo $files | cut -d',' -f1)
          echo "url=https://cdn.nav.no/$cdn_js_path" >> $GITHUB_OUTPUT
      - name: "update min-side-dev-manifest"
        uses: "navikt/tms-deploy/.github/workflows/oppdater-mikrofrontend-manifest.yaml@main"
        with:
          cluster: dev-gcp
          id: "tms-mikfrofrontend-template-vitets"
          url: ${{ steps.export-cdn-url.outputs.url }}
#      - name: "update min-side-prod-manifest"
#        uses: "navikt/tms-deploy/.github/workflows/oppdater-mikrofrontend-manifest.yaml@main"
#        with:
#          cluster: dev-gcp
#          id: "tms-mikfrofrontend-template-vitets"
#          url: ${{ steps.export-cdn-url.outputs.url }}


#      - name: "Build and publish Docker image"
#        run: "docker build --pull --tag ${IMAGE} . && echo $GITHUB_TOKEN | docker login\
#          \ --username $GITHUB_REPOSITORY --password-stdin https://ghcr.io\
#          \ && docker push ${IMAGE}"
#        env:
#          "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"

#  deploy-dev:
#    runs-on: "ubuntu-latest"
#    needs: "build"
#    steps:
#      - uses: "actions/checkout@v3"
#      - name: "Deploy to dev"
#        uses: "nais/deploy/actions/deploy@v1"
#        env:
#          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
#          CLUSTER: dev-gcp
#          RESOURCE: nais/dev-gcp/nais.yaml
#  deploy-prod:
#    if: github.ref == 'refs/heads/main'
#    runs-on: "ubuntu-latest"
#    needs: "build"
#    steps:
#      - uses: "actions/checkout@v3"
#      - name: "Deploy to prod"
#        uses: "nais/deploy/actions/deploy@v1"
#        env:
#          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
#          CLUSTER: prod-gcp
#          RESOURCE: nais/prod-gcp/nais.yaml
